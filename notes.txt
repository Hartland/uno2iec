use following guide for disabling COM port on PI:
http://www.hobbytronics.co.uk/raspberry-pi-serial-port

basically do:
disable login:
sudo nano /etc/inittab

This file has the command to enable the login prompt and this needs to be disabled. Edit the
file and move to the end of the file. You will see a line similar to

T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100

Disable it by adding a # character to the beginning. Save the file.

#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100


Disable Bootup Info

When the Raspberry Pi boots up, all the bootup information is sent to the serial port.
Disabling this bootup information is optional and you may want to leave this enabled as it
is sometimes useful to see what is happening at bootup. If you have a device connected (i.e.
Arduino) at bootup, it will receive this information over the serial port, so it is up to
you to decide whether this is a problem or not.

You can disable it by editing the file /boot/cmdline.txt

The contents of the file look like this

dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait

Remove all references to ttyAMA0 (which is the name of the serial port).
The file will now look like this

dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait

REBOOT!

test that this works with minicom:
minicom -b 9600 -o -D /dev/ttyAMA0

--------------------------------------------------
qt support for serial port:
--------------------------------------------------

qextserialport is found here:
git clone https://code.google.com/p/qextserialport/

(simply build with qmake)

------------------------------------------------------
How to test the ATN, CLOCK, DATA lines from CBM basic:
------------------------------------------------------

10 A=56576
20 POKE A,PEEK(A) AND (255 - 8 - 16 - 32)
30 PRINT PEEK(A) AND 192
40 GOTO 30

---------------------------------------------------------
For ttyACM0 access without sudo on ubuntu (or derivates).
---------------------------------------------------------
sudo usermod -a -G tty yourUserName
sudo usermod -a -G dialout yourUserName


----------------------------------------------------------------------------------------------
Arduino to Host command protocol description:
----------------------------------------------------------------------------------------------
At bootup, Arduino tries continuously to connect to host with:
CONNECT
response should from host when ready then be:
OK><deviceNumber>|<atnpin>|<clockpin>|<datapin>|<resetpin>(|<srqinpin>)<CR>
Whereupon client could set the pin configuration according to the returned string.

Send debug string to host
D<severityId><facilityId><debug msg string><CR>
The severityId is one byte consisting of either 'S', 'I', 'W' or 'E'
The facilityId is a single id of a previously registered facility.

Register facility with abbreviating character and corresponding string to expand to on host side.
!<abbreviationChar><facilityString><CR>

IEC open command, channel is 0-15, the command string is just like from the iec interface. Pipe separated, CR terminated.
The code return is according to the values of the IOErrorMessage enum.
Request: O<channel>|command string<CR>
Response: ><code><CR>

Read byte(s) from current file of current (last selected) file system type.
Current byte read/write byte number size determines number of bytes in sequence.
The host returns 'B' followed by the byte(s) being read, or answers with 'E' if end of file has been reached.
Request: 'R'
Response: B<BYTE NumBytes><Byte 0..n>
Or Response: E<BYTE NumBytes><Byte 0..n>

Write byte(s) to current file of current (last selected) file system type. Current byte read/write byte number size determines number of bytes in sequence.
Request: W<BYTE NumBytes><BYTE 0..n>

'C'
Close file for current file system

'L' request for sending next directory / information line.
Response: 'L'<BYTE length><line data>
This response cannot have line data more than 255 chars since the length for each line is specified by a byte.
The line data includes the basic address.
If 'l' is returned, there was no more data


--------------------------------------------------
CBM syntax:
--------------------------------------------------
LOAD"<<",8      Reset interface and communication state. Do this if there is problem with PC to arduino sync.
								Read < as the petscii back-arrow.

LOAD "!!",8
Retreive information about the current used file system / image.

In Nativs FS mode: (the default mode)

LOAD "*",8					Load the first file from the current disk image or the native fs.
LOAD"$",8           Gets directory listing, equivalent to LOAD".",8
										Loads the current directory, either inside an image or the native fs.
LOAD"gamesdir",8    Enter the "gamesdir" directory, and get listing.
LOAD"..",8          Up one directory and get directory listing.
LOAD"tetris.prg",8  Loads the "tetris.prg" program file.
SAVE"example.prg",8 Save into "example.prg" which is a native fs file.
LOAD"disk.d64",8    Loads the disk.d64 disk image and enters D64 mode.
LOAD"tape.t64",8    Loads the tape.t64 tape image and enters T64 mode.
LOAD "FILE.M2I",8		Move into a M2I "image" and load the list of contained native fs files.

In D64 mode:
	Load "$", "*"				wildcards, filenames works (almost) as espected on a 1541.
	LOAD"<",8           (back-arrow). Escape D64 mode, and back to FAT mode.
	SAVE"abc",8         Fools the CBM, but has no effect. Saves in D64 are
											not implemented

In T64 mode:
	Load "$", "*"				wildcards, filenames works as if it was a D64.
	LOAD"<",8           (back-arrow). Escape T64 mode, and back to FAT mode.
	SAVE"abc",8         Fools the CBM, but has no effect.


NOTE:
-----
The FILE NOT FOUND ERROR is used to message both the original meaning, but
it is also used to inform if there is an error with the host communication or filesystem.
Try a LOAD"<<",8 to try going into initial state.
